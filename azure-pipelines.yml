trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - src/Vued/Vued.BL/*
      - src/Vued/Vued.DAL/*
      - src/Vued/Vued.BL.Tests/*
      - src/Vued/Vued.DAL.Tests/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  solution: 'src/Vued/**/*.sln'
  dalTestProject: 'src/Vued/Vued.DAL.Tests/Vued.DAL.Tests.csproj'
  blTestProject: 'src/Vued/Vued.BL.Tests/Vued.BL.Tests.csproj'
  # Define environment variables for tests (modify as needed)
  TestEnvironment: 'Test'
  ConnectionString: '' # Add your test DB connection string here if needed

steps:
- task: UseDotNet@2
  displayName: 'Install .NET 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    includePreviewVersions: false

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'
    noCache: true

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Run DAL tests'
  inputs:
    command: 'test'
    projects: '$(dalTestProject)'
    arguments: '--configuration $(buildConfiguration) --no-build --no-restore --collect:"XPlat Code Coverage" --logger "trx;LogFileName=dal_test_results.trx"'
    publishTestResults: true
  env:
    ASPNETCORE_ENVIRONMENT: '$(TestEnvironment)'
    ConnectionString: '$(ConnectionString)'

- task: DotNetCoreCLI@2
  displayName: 'Run BL tests'
  inputs:
    command: 'test'
    projects: '$(blTestProject)'
    arguments: '--configuration $(buildConfiguration) --no-build --no-restore --collect:"XPlat Code Coverage" --logger "trx;LogFileName=bl_test_results.trx"'
    publishTestResults: true
  env:
    ASPNETCORE_ENVIRONMENT: '$(TestEnvironment)'
    ConnectionString: '$(ConnectionString)'

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(Agent.TempDirectory)/**/*coverage'
    failIfCoverageEmpty: false
  condition: succeededOrFailed()
